name: Zap Scan Application (Docker Image)
on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:

env:
  APP_PORT: 8080 # Port the application is listening on
  TEAM_NAMESPACE: security-champion-admin # Team namespace in NAIS

permissions:
  contents: read
  id-token: write # for nais docker-build-push to fetch id-token
jobs:
  build-app:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.docker-push.outputs.image }}
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # ratchet:actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@25b062c917b0c75f8b47d8469aff6c94ffd89abb # ratchet:actions/setup-node@v2
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
      - name: Yarn install and build client
        working-directory: web
        run: yarn install && yarn build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Yarn install and build server
        working-directory: web/server
        run: yarn install && yarn build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}

      - uses: nais/docker-build-push@3e3dd59e778ead7ba199dbfcde40350a178a2226 # ratchet:nais/docker-build-push@v0
        id: docker-push
        with:
          team: ${{ env.TEAM_NAMESPACE }}
          push_image: true
          pull: true
          docker_context: web/
          dockerfile: web/Dockerfile
          image_suffix: frontend
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}

  zap-scan:
    runs-on: ubuntu-latest
    needs: [build-app]
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # ratchet:actions/checkout@v4
      - uses: nais/login@4ce7445c84f09114e481a1d2c164f563e9e2ba8e # ratchet:nais/login@v0
        with:
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          team: ${{ env.TEAM_NAMESPACE }}

      - name: Start application image
        run: docker run --name app -d -p ${{env.APP_PORT}}:${{env.APP_PORT}} ${{ needs.build-app.outputs.image }}

      - name: Zap Setup
        run: |
          echo "APP_URL=http://$(docker inspect app | grep IPAddress | tail -1 | awk '{print $2}' | tr -d '\",\n'):${{env.APP_PORT}}" >> $GITHUB_ENV
          mkdir zap
          chmod 0777 zap

      - name: ZAP Baseline Scan # https://www.zaproxy.org/docs/docker/baseline-scan/
        run: |
          docker run -v $(pwd)/zap:/zap/wrk/:rw \
          -t \
          softwaresecurityproject/zap-stable \
          zap-baseline.py \
          -t ${{ env.APP_URL }} \
          -r report_web.html \
          -a \
          -s \
          -I \
          -j

      - name: Upload scan report
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # ratchet:actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: zap-report
          path: zap/report_web.html