name: Zap Scan Application (Docker Image)
on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:

env:
  APP_PORT: 8080 # Port the application is listening on
  TEAM_NAMESPACE: security-champion-admin # Team namespace in NAIS

permissions:
  contents: read
  id-token: write # for nais docker-build-push to fetch id-token
jobs:
  build-app:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.docker-push.outputs.image }}
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # ratchet:actions/checkout@v4

      - uses: actions/setup-java@16ef37f8dd292a31055a9ee0d26fa0a4efab58de # ratchet:actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
          cache: gradle
          
      - uses: gradle/gradle-build-action@e2097ccd7e8ed48671dc068ac4efa86d25745b39 # ratchet:gradle/gradle-build-action@v2
      - name: test and build
        run: ./gradlew shadowjar
        working-directory: ./backend/

      - uses: nais/docker-build-push@3e3dd59e778ead7ba199dbfcde40350a178a2226 # ratchet:nais/docker-build-push@v0
        id: docker-push
        with:
          team: ${{ env.TEAM_NAMESPACE }}
          push_image: true
          pull: true
          docker_context: backend/
          dockerfile: backend/Dockerfile
          image_suffix: backend
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}

  zap-scan:
    runs-on: ubuntu-latest
    needs: [build-app]
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # ratchet:actions/checkout@v4
      - uses: nais/login@4ce7445c84f09114e481a1d2c164f563e9e2ba8e # ratchet:nais/login@v0
        with:
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          team: ${{ env.TEAM_NAMESPACE }}

      - name: network
        run: docker create network zap
    
      - name: Start application image
        run: docker run --name app --network zap -d -p ${{env.APP_PORT}}:${{env.APP_PORT}} ${{ needs.build-app.outputs.image }}

      - name: Zap Setup
        run: | 
          echo "APP_URL=http://$(docker inspect app | grep IPAddress | tail -1 | awk '{print $2}' | tr -d '\",\n'):${{env.APP_PORT}}" >> $GITHUB_ENV
          mkdir zap
          chmod 0777 zap

      - name: ZAP Baseline Scan # https://www.zaproxy.org/docs/docker/baseline-scan/
        run: |
            docker run -v $(pwd)/zap:/zap/wrk/:rw \
            -t \
            --network zap  \
            softwaresecurityproject/zap-stable \
            zap-baseline.py \
            -t ${{ env.APP_URL }} \
            -r report_web.html \
            -a \
            -s \
            -I \
            -j

      - name: Upload scan report
        uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # ratchet:actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: zap-report
          path: zap/report_web.html
