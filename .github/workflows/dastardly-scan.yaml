name: Dastardly
on:
  workflow_dispatch:
jobs:
  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.docker-push.outputs.image }}
    permissions:
      contents: write # dep-submission
      id-token: write # nais docker-build-push
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # ratchet:actions/checkout@v4
      - name: Setup Node 20
        uses: actions/setup-node@25b062c917b0c75f8b47d8469aff6c94ffd89abb # ratchet:actions/setup-node@v2
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
      - name: Yarn install and build client
        working-directory: web
        run: yarn install && yarn build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Yarn install and build server
        working-directory: web/server
        run: yarn install && yarn build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - uses: nais/docker-build-push@3e3dd59e778ead7ba199dbfcde40350a178a2226 # ratchet:nais/docker-build-push@v0
        id: docker-push
        with:
          team: security-champion-admin
          push_image: true
          pull: true
          docker_context: web/
          dockerfile: web/Dockerfile
          image_suffix: frontend
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
  dast-scan-frontend:
    runs-on: ubuntu-latest
    needs: [build-frontend]
    permissions:
      contents: write # to write sarif
      id-token: write # for nais/login
    env:
      APP_PORT: 8080
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # ratchet:actions/checkout@v4
      - uses: nais/login@4ce7445c84f09114e481a1d2c164f563e9e2ba8e # ratchet:nais/login@v0
        with:
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          team: security-champion-admin
      - name: Run frontend
        run: docker run --name app -d -p ${{env.APP_PORT}}:${{env.APP_PORT}} ${{ needs.build-frontend.outputs.image }}
      - name: Get IP for frontend
        run: echo "APP_URL=http://$(docker inspect app | grep IPAddress | tail -1 | awk '{print $2}' | tr -d '\",\n'):${{env.APP_PORT}}" >> $GITHUB_ENV
  
      - name: Run Dastardly Action Step
        continue-on-error: true                        # This allows subsequent steps to run even if this step fails
        uses: PortSwigger/dastardly-github-action@main
        with:
          target-url: ${{ env.APP_URL }}

  
      - name: Publish Test Report
        if: always()                                    # Forces this step to always run
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: '**/dastardly-report.xml'       # You need to update this path if you pass in a different output filename to the Dastardly action
          require_tests: true